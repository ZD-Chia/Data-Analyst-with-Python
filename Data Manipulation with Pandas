#09 March 2023
  #inspecting DF
  # Print the head of the homelessness data
    print(homelessness.head())
  .info()
  .shape
  .describe()
  
  # Print the values of homelessness
   print(homelessness.values)

  # Print the column index of homelessness
  print(homelessness.columns)

  # Print the row index of homelessness
  print(homelessness.index)
  
 #Sorting rows
 # Sort homelessness by descending family members
  homelessness_fam = homelessness.sort_values("family_members", ascending = False)
  
 # Sort homelessness by region, then descending family members
 homelessness_reg_fam = homelessness.sort_values(["region", "family_members"], ascending =[True, False])
 
 # Select the individuals column
  individuals = homelessness["individuals"]
 # Select the state and family_members columns
 state_fam = homelessness[["state", "family_members"]]
 # Filter for rows where individuals is greater than 10000
 ind_gt_10k = homelessness[homelessness["individuals"]> 10000]
 # Filter for rows where region is Mountain
 mountain_reg = homelessness[homelessness["region"]=="Mountain"]
 # Filter for rows where family_members is less than 1000 
 # and region is Pacific
 fam_lt_1k_pac = homelessness[(homelessness["family_members"]<1000) & (homelessness["region"]=="Pacific")]
 
 # Subset for rows in South Atlantic or Mid-Atlantic regions
 south_mid_atlantic = homelessness [homelessness["region"].isin(["South Atlantic", "Mid-Atlantic"])]
 # The Mojave Desert states
 canu = ["California", "Arizona", "Nevada", "Utah"]
 # Filter for rows in the Mojave Desert states
 mojave_homelessness = homelessness[homelessness["state"].isin(canu)] 
 
 #new columns
 dogs["height_m"] = dogs["height_cm"]/100
 print(dogs)
 
 #multiple manipulations
 bmi_lt_100 = dogs[dogs["bmi"]<100]
 bmi_lt_100_height = bmi-lt_100.sort_values("height_cm", ascending = False)
 bmi_lt_100_height[["name", "height_cm", "bmi"]]
 
 # Add total col as sum of individuals and family_members
 homelessness["total"] = homelessness["individuals"] + homelessness["family_members"]
 # Add p_individuals col as proportion of total that are individuals
 homelessness["p_individuals"] = homelessness["individuals"] / homelessness["total"]
 print(homelessness)
 
 # Create indiv_per_10k col as homeless individuals per 10k state pop
 homelessness["indiv_per_10k"] = 10000 * homelessness["individuals"] / homelessness["state_pop"] 

 # Subset rows for indiv_per_10k greater than 20
 high_homelessness = homelessness[homelessness["indiv_per_10k"] > 20]

 # Sort high_homelessness by descending indiv_per_10k
 high_homelessness_srt = high_homelessness.sort_values("indiv_per_10k", ascending = False)

 # From high_homelessness_srt, select the state and indiv_per_10k cols
 result = high_homelessness_srt[["state", "indiv_per_10k"]]
 print(result)
 
 
 
