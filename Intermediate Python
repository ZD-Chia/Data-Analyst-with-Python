#07 MAr 23
  #Matplotlib
  #ticks
  plt.yticks([0,2,4,6,8,10],
              ['0','2B','4B','6B','8B','10B'])
  #ADD more daata
  year = [1800, 1850, 1900] + year
  pop = [1.0, 1.252, 1.650] + pop
  
  
  #Dictionaries & Pandas
  #list
  pop=[30.55, 2.77,393.1]
  countries=["afghanistan", "albania", "algeria"]
  ind_alb=countries.index("albania")
  ind_alb
  
  #dictionaries
  world={"afghanistan":30.55, "albania":2.77, "algeria":393.1}
  world["albania"]
  
  #Dictionaries part2
  world["sealand"] = 0.000027
  world #you will see new key and value set added to the dictionary
  "sealand" in world
  
  #input world["sealand"] = 0.000028 to update the value in the dict
  #del(world["sealnd"])
  world #"sealand" set was deleted
  
  #Pandas 
  brics
  dict = {
      "country":["Brazil", "Russia","India","China","South Africa"],
      "capital":["Brasilia","Moscow","New Delhi","Beijing","Pretoria"],
      "area":[8.516,17.10,3.286,9.597,1.221]
      "population":[200.4,143.5,1252,1357,52.98]}
  
  importpandas as pd
  brics=pd.DataFrame(dict)
  
  #setting index to the list
  brics.index = ["BR","RU","IN","CH","SA"]
  brics
  
  brics = pd.read_csv("path/to/brics.csv", index_col = 0)
  brics
  
  
 #pandas part2
 brics["country"]
 type(brics["country"])
 brics[["coutnry"]]
 brics[["coutnry", "capitals]]
 
 brics[1:4] #0,1,2,3 row
 
 #loc (label-based)
 brics.loc[["RU,"IN","CH"]] #show all column data in each row
 brics.loc[["RU,"IN","CH"], ["country","capital"]] #then it will only show coutnry and capital column for each row
 brics.loc[:, ["country","capital"]] #select all row 
 
 #iloc(integer position-based)
 brics.iloc[[1]] #use the row position to select the row
 brics.iloc[[1,2,3], [0,1]] #first 2 column data select for first 3 rows
 brics.iloc[:, [0,1]] #select all row
 
 
 #Logic, Control Flow and Filtering
 #numberic comparisons
 2 < 3 #True
 2 == 3 #False
 
 #boolean operators
 logical_and()
 logical_or()
 logical_not()
 
 np.logical_and(bmi>21, bmi<22) # array([True, False, True, False, True], dtype = bool)
 bmi[np.logical_and(bmi > 21, bmi <22)]  #array([21.852,21.75.21.441])
 
 #if, elif,else
 z=4
 if z %2 ==0:   #True
      print("z is divisible by 2")
 elif z % 3 == 0:
      print("z is divisible by 3")
 else :
     print("z is neither divisible by 2 nor by 3")
     
 #filtering pandas Data Frame
 ##step1: get column
 brics.loc[:,"area"]
 brics.iloc[:,2]
 
 ##step2:compare
 btics["area"] > 8
 is_huge = brics["area"] > 8
 
 
 ##step3: subset DF
 is_huge
 brics[is_huge] or brics[brics["area"] > 8]
 
 import numpy as np
 np.logical_and(brics["area"] >8, brics["area"] < 10]
 brics[np.logical_and(brics["area"] > 8, brics["area"] < 10)]
 
 # Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Convert code to a one-liner
sel = cars[cars['drives_right']]
print(sel)
     
# Create car_maniac: observations that have a cars_per_cap over 500
cpc = cars["cars_per_cap" ]
many_cars = cpc > 500
car_maniac = cars[many_cars]
print(car_maniac)    
      
#while loop
error = 50.0
while error > 1:
  error = error /4
  print(error)

#for loop
fam = [ 1.73, 1.68, 1.71, 1.89]
for height in fam:
    print(height)
for index, height in enumerate(fam):
    print("index " + str(index) + ":" + str(height))
    #index 0 : 1.73
    
for c in "family:
    print(c.capitalize())
    
# house list of lists
house = [["hallway", 11.25], 
         ["kitchen", 18.0], 
         ["living room", 20.0], 
         ["bedroom", 10.75], 
         ["bathroom", 9.50]]
         
# Build a for loop from scratch
for key, value in house:
    print("the " + str(key), "is " + str(value) + " sqm")
    
#dictloop.py
world = { "afghanistan" : 30.55,
          "albania": 2.77,
          "algeria": 39.21}
for key, value in world.items():  #require a method
    print(key + " -- " + str(value))

#numpy array #use a function
np.nditer(my_array):

# Import numpy as np
import numpy as np

# For loop over np_height # iterates over all elements in np_height
for x in np_height:
    print(str(x) + " inches")

# For loop over np_baseball # visits every element of the np_baseball array 
for x in np.nditer(np_baseball):
    print(x) 
 
#for, first try loop data structures
import pandas as pd
brics = pd.read_csv("brics.csv", index_col = 0)
for val in rbaics:
    print(val)

#iterrows
for lab, row in brics.iterrows():
    print(lab)
    print(row)
#selective print
for lab , row in brics.iterrows():
    print(lab + ": " + row["capital"])
#add column
for lab , row in brics.iterrows():
    #creating series on every iteration
    brics.loc[lab, "name_length"] = len(row["country"])
print(brics)   
    
#apply
brics["name_length"] = brics["country"].apply(len)
print(brics)

# Import cars data
import pandas as pd
cars = pd.read_csv('cars.csv', index_col = 0)

# Adapt for loop
for lab, row in cars.iterrows() :
    print(lab + ": " + str(row["cars_per_cap"]))
# Code for loop that adds COUNTRY column
for lab, row in cars.iterrows():
    cars.loc[lab, "COUNTRY"] = row["country"].upper()
print(cars)   

# Use .apply(str.upper)
cars["COUNTRY"] = cars["country"].apply(str.upper)


#08 March 2023
  #random numbers
  import numpy as np
  np.random.rand() #Pseudo-random numbers
  
  np.random.seed(123) #starting from a seed
  np.random.rand() #0.6964694185597861 #same seed: same random numbers if repeat 
  np.random.rand() # 2nd time also same number #ensures "reproducibility" 
  
  #coin toss
  np.random.seed(123)
  coin = np.random.randint(0,2) #randomly generate 0 or 1
  print(coin)
  if coin == 0 :
      print("head")
  else:
      print("tails")
  

# Starting step
step = 50

# Roll the dice
dice = np.random.randint(1,7)

# Finish the control construct
if dice <= 2 :
    step = step - 1
elif dice <= 5 :
    step = step + 1
else :
    step = step + np.random.randint(1,7)

# Print out dice and step
print(dice)
print(step)

#random walk
#head or tails
  np.random.seed(123)
  outcomes = []
  for x in range(10):
      coin = np.random.randint(0,2)
      if coin == 0 :
        outcomes.append("head")
      else:
        outcomes.append("tails")
  print(outcomes)
  
  #randomwalk
  np.random.seed(123)
  tails = []
  for x in range(10):
      coin = np.random.randint(0,2)
      tails.append(tails[x] + coin)
  # Initialize random_walk
np.random.seed(123)
random_walk = [0]

# Complete the ___
for x in range(100) :
    # Set step: last element in random_walk
    step = random_walk[-1]

    # Roll the dice
    dice = np.random.randint(1,7)

    # Determine next step
    if dice <= 2:
        step = step - 1
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    # append next_step to random_walk
    random_walk.append(step)

    # Print random_walk
    print(random_walk)
 # Initialize random_walk
  random_walk = [0]

  for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        # Replace below: use max to make sure step can't go below 0
        step = max(0, step-1)
        
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

  print(random_walk)   
  # Import matplotlib.pyplot as plt
  from matplotlib import pyplot as plt
  import matplotlib.pyplot as plt

  # Plot random_walk
  plt.plot(random_walk)

  # Show the plot
  plt.show()
  
  #dsitribution
  import numpy as np
  import matplotlib.pyplot as plt
  np.random.seed(123)
  final_tails = []
  for x in range(1000): #100 times not that smooth, 1000 getting better, 10000 looks smooth. to get a bell shape.
      tails = [0]
      for x in range(10):
        coin = np.random.randint(0,2)
        tails.append(tails[x] + coin)
      final_tails.append(tails[-1])
  print(final_tails)
  
  plt.hist(final_tails, bins = 10)
  plt.show()
  
  # Initialize all_walks (don't change this line)
  all_walks = []

  # Simulate random walk 10 times
  for i in range(10) :

    # Code from before
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)

    # Append random_walk to all_walks
    all_walks.append(random_walk)

  # Print all_walks
  print(all_walks)
  # Convert all_walks to NumPy array: np_aw
  np_aw = np.array(all_walks)

  # Plot np_aw and show
  plt.plot(np_aw)
  plt.show()
  # Clear the figure
  plt.clf()

  # Transpose np_aw: np_aw_t
  np_aw_t = np.transpose(np_aw)

  # Plot np_aw_t and show
  plt.plot(np_aw_t)
  plt.show()
  
  # Simulate random walk 250 times
  all_walks = []
  for i in range(250) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        # Implement clumsiness #have a 0.1% chance of falling down.
        if np.random.rand() < 0.001 :
            step = 0

        random_walk.append(step)
    all_walks.append(random_walk)

  # Create and plot np_aw_t
  np_aw_t = np.transpose(np.array(all_walks))
  plt.plot(np_aw_t)
  plt.show()
  
  import numpy as np
  import matplotlib.pyplot as plt
  # Simulate random walk 500 times
  all_walks = []
  for i in range(500) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        if np.random.rand() <= 0.001 :
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)

  # Create and plot np_aw_t
  np_aw_t = np.transpose(np.array(all_walks))

  # Select last row from np_aw_t: ends
  ends = np_aw_t[-1,:]

  # Plot histogram of ends, display plot
  plt.hist(ends, bins = 10)
  plt.show()
  
  #What is the odds of reaching 60 Steps or higher with this game
  count=0
  for i in ends:
    if i>=60:
        count=count+1
  print("No. of times is:",count)
  print("My odds are:",count/500)
